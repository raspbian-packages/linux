commit 31c350f3e5f77dfd7b36d7428420c545a255a1cc
Author: Grigori Goronzy <greg@blackbox>
Date:   Tue Jul 31 23:18:12 2012 +0200

    sdhci-bcm2708: use multiblock-type transfers for single blocks
    
    There are issues with both single block reads (missed completion)
    and writes (data loss in some cases!). Just don't do single block
    transfers anymore, and treat them like multiblock transfers. This
    adds a quirk for this and uses it.

Index: linux-3.2.46/drivers/mmc/card/block.c
===================================================================
--- linux-3.2.46.orig/drivers/mmc/card/block.c	2013-05-30 13:35:16.000000000 +0000
+++ linux-3.2.46/drivers/mmc/card/block.c	2013-07-26 19:34:30.000000000 +0000
@@ -1075,7 +1075,7 @@
 			brq->data.blocks = 1;
 	}
 
-	if (brq->data.blocks > 1 || do_rel_wr) {
+	if (brq->data.blocks > 1 || do_rel_wr || card->host->caps2 & MMC_CAP2_FORCE_MULTIBLOCK) {
 		/* SPI multiblock writes terminate using a special
 		 * token, not a STOP_TRANSMISSION request.
 		 */
Index: linux-3.2.46/drivers/mmc/host/sdhci-bcm2708.c
===================================================================
--- linux-3.2.46.orig/drivers/mmc/host/sdhci-bcm2708.c	2013-07-26 19:34:29.000000000 +0000
+++ linux-3.2.46/drivers/mmc/host/sdhci-bcm2708.c	2013-07-26 19:34:30.000000000 +0000
@@ -1392,6 +1392,9 @@
 
     if (allow_highspeed)
         host->mmc->caps |= MMC_CAP_SD_HIGHSPEED | MMC_CAP_MMC_HIGHSPEED;
+
+    /* single block writes cause data loss with some SD cards! */
+    host->mmc->caps2 |= MMC_CAP2_FORCE_MULTIBLOCK;
 #endif
 
 	ret = sdhci_add_host(host);
Index: linux-3.2.46/include/linux/mmc/host.h
===================================================================
--- linux-3.2.46.orig/include/linux/mmc/host.h	2013-05-30 13:35:16.000000000 +0000
+++ linux-3.2.46/include/linux/mmc/host.h	2013-07-26 19:34:30.000000000 +0000
@@ -242,6 +242,7 @@
 #define MMC_CAP2_CACHE_CTRL	(1 << 1)	/* Allow cache control */
 #define MMC_CAP2_POWEROFF_NOTIFY (1 << 2)	/* Notify poweroff supported */
 #define MMC_CAP2_NO_MULTI_READ	(1 << 3)	/* Multiblock reads don't work */
+#define MMC_CAP2_FORCE_MULTIBLOCK (1 << 4)	/* Always use multiblock transfers */
 
 	mmc_pm_flag_t		pm_caps;	/* supported pm features */
 	unsigned int        power_notify_type;
