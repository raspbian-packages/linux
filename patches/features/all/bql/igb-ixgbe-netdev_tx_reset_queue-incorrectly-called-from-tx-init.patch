From: John Fastabend <john.r.fastabend@intel.com>
Date: Mon, 23 Apr 2012 12:22:39 +0000
Subject: igb, ixgbe: netdev_tx_reset_queue incorrectly called from tx init
 path

commit dad8a3b3eaa0c2ca25368a0b9f65edca84e27a40 upstream.

igb and ixgbe incorrectly call netdev_tx_reset_queue() from
i{gb|xgbe}_clean_tx_ring() this sort of works in most cases except
when the number of real tx queues changes. When the number of real
tx queues changes netdev_tx_reset_queue() only gets called on the
new number of queues so when we reduce the number of queues we risk
triggering the watchdog timer and repeated device resets.

So this is not only a cosmetic issue but causes real bugs. For
example enabling/disabling DCB or FCoE in ixgbe will trigger this.

CC: Alexander Duyck <alexander.h.duyck@intel.com>
Signed-off-by: John Fastabend <john.r.fastabend@intel.com>
Tested-by: John Bishop <johnx.bishop@intel.com>
Tested-by: Aaron Brown <aaron.f.brown@intel.com>
Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
---
 drivers/net/ethernet/intel/igb/igb_main.c        |    4 ++--
 drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c |    2 ++
 drivers/net/ethernet/intel/ixgbe/ixgbe_main.c    |    4 ++--
 3 files changed, 6 insertions(+), 4 deletions(-)

Index: linux-3.2.46/drivers/net/ethernet/intel/igb/igb_main.c
===================================================================
--- linux-3.2.46.orig/drivers/net/ethernet/intel/igb/igb_main.c	2013-07-26 19:24:47.000000000 +0000
+++ linux-3.2.46/drivers/net/ethernet/intel/igb/igb_main.c	2013-07-26 19:24:50.000000000 +0000
@@ -2721,8 +2721,6 @@
 
 	txdctl |= E1000_TXDCTL_QUEUE_ENABLE;
 	wr32(E1000_TXDCTL(reg_idx), txdctl);
-
-	netdev_tx_reset_queue(txring_txq(ring));
 }
 
 /**
@@ -3216,6 +3214,8 @@
 		igb_unmap_and_free_tx_resource(tx_ring, buffer_info);
 	}
 
+	netdev_tx_reset_queue(txring_txq(tx_ring));
+
 	size = sizeof(struct igb_tx_buffer) * tx_ring->count;
 	memset(tx_ring->tx_buffer_info, 0, size);
 
Index: linux-3.2.46/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c
===================================================================
--- linux-3.2.46.orig/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c	2013-07-26 18:54:08.000000000 +0000
+++ linux-3.2.46/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c	2013-07-26 19:24:50.000000000 +0000
@@ -1764,6 +1764,8 @@
 		staterr = le32_to_cpu(rx_desc->wb.upper.status_error);
 	}
 
+	netdev_tx_reset_queue(txring_txq(tx_ring));
+
 	/* re-map buffers to ring, store next to clean values */
 	ixgbe_alloc_rx_buffers(rx_ring, count);
 	rx_ring->next_to_clean = rx_ntc;
Index: linux-3.2.46/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
===================================================================
--- linux-3.2.46.orig/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c	2013-07-26 19:24:49.000000000 +0000
+++ linux-3.2.46/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c	2013-07-26 19:24:50.000000000 +0000
@@ -2423,8 +2423,6 @@
 	/* enable queue */
 	IXGBE_WRITE_REG(hw, IXGBE_TXDCTL(reg_idx), txdctl);
 
-	netdev_tx_reset_queue(txring_txq(ring));
-
 	/* TXDCTL.EN will return 0 on 82598 if link is down, so skip it */
 	if (hw->mac.type == ixgbe_mac_82598EB &&
 	    !(IXGBE_READ_REG(hw, IXGBE_LINKS) & IXGBE_LINKS_UP))
@@ -3942,6 +3940,8 @@
 		ixgbe_unmap_and_free_tx_resource(tx_ring, tx_buffer_info);
 	}
 
+	netdev_tx_reset_queue(txring_txq(tx_ring));
+
 	size = sizeof(struct ixgbe_tx_buffer) * tx_ring->count;
 	memset(tx_ring->tx_buffer_info, 0, size);
 
