From: Ben Hutchings <ben@decadent.org.uk>
Date: Tue, 29 Nov 2016 02:10:21 +0000
Subject: fs: Fix ABI change in 3.2.84
Forwarded: not-needed

In order to fix CVE-2015-1350, inode_change_ok() had to be changed
to take a dentry pointer as passed down from inode_setattr(), and
it was renamed to setattr_prepare().

Add inode_change_ok() back, along with a hack to pass the dentry
down via struct attr when there isn't a file pointer there.  In 3.2
there don't appear to be any cases where both the file pointer is
provided and the dentry pointer is needed.  (In upstream there is -
truncate operations set both ATTR_FILE and ATTR_KILL_PRIV.)  WARN
and return an error if that does happen.  

---
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -455,6 +455,7 @@ typedef void (dio_iodone_t)(struct kiocb
 #define ATTR_KILL_PRIV	(1 << 14)
 #define ATTR_OPEN	(1 << 15) /* Truncating from open(O_TRUNC) */
 #define ATTR_TIMES_SET	(1 << 16)
+#define ATTR_DENTRY	(1 << 18) /* ia_file is actually a dentry */
 
 /*
  * This is the Inode Attributes structure, used for notify_change().  It
@@ -2614,6 +2615,7 @@ extern int buffer_migrate_page(struct ad
 #define buffer_migrate_page NULL
 #endif
 
+extern int inode_change_ok(const struct inode *, struct iattr *);
 extern int setattr_prepare(struct dentry *, struct iattr *);
 extern int inode_newsize_ok(const struct inode *, loff_t offset);
 extern void setattr_copy(struct inode *inode, const struct iattr *attr);
--- a/fs/attr.c
+++ b/fs/attr.c
@@ -15,6 +15,9 @@
 #include <linux/security.h>
 #include <linux/evm.h>
 
+static int __setattr_prepare(struct dentry *dentry, const struct inode *inode,
+			     struct iattr *attr);
+
 /**
  * setattr_prepare - check if attribute changes to a dentry are allowed
  * @dentry:	dentry to check
@@ -31,7 +34,35 @@
  */
 int setattr_prepare(struct dentry *dentry, struct iattr *attr)
 {
-	struct inode *inode = dentry->d_inode;
+	return __setattr_prepare(dentry, dentry->d_inode, attr);
+}
+EXPORT_SYMBOL(setattr_prepare);
+
+/* Backward-compatible version of setattr_prepare() */
+int inode_change_ok(const struct inode *inode, struct iattr *attr)
+{
+	struct dentry *dentry;
+
+	/*
+	 * If ia_file holds a dentry and it matches the inode then
+	 * pass it down.  Otherwise, pass NULL.  The dentry is only
+	 * needed if ATTR_KILL_PRIV is set in ia_flags.
+	 */
+	if ((attr->ia_valid & (ATTR_FILE | ATTR_DENTRY)) == ATTR_DENTRY) {
+		dentry = (struct dentry *)attr->ia_file;
+		if (dentry->d_inode != inode)
+			dentry = NULL;
+	} else {
+		dentry = NULL;
+	}
+
+	return __setattr_prepare(dentry, inode, attr);
+}
+EXPORT_SYMBOL(inode_change_ok);
+
+static int __setattr_prepare(struct dentry *dentry, const struct inode *inode,
+			     struct iattr *attr)
+{
 	unsigned int ia_valid = attr->ia_valid;
 
 	/*
@@ -82,6 +113,9 @@ kill_priv:
 	if (ia_valid & ATTR_KILL_PRIV) {
 		int error;
 
+		if (WARN_ON_ONCE(!dentry))
+			return -EIO;
+
 		error = security_inode_killpriv(dentry);
 		if (error)
 			return error;
@@ -89,7 +123,6 @@ kill_priv:
 
 	return 0;
 }
-EXPORT_SYMBOL(setattr_prepare);
 
 /**
  * inode_newsize_ok - may this inode be truncated to a given size
@@ -249,11 +282,23 @@ int notify_change(struct dentry * dentry
 	if (error)
 		return error;
 
+	/* Smuggle the dentry through to inode_change_ok() */
+	if (!(attr->ia_valid & ATTR_FILE)) {
+		attr->ia_file = (struct file *)dentry;
+		attr->ia_valid |= ATTR_DENTRY;
+	}
+
 	if (inode->i_op->setattr)
 		error = inode->i_op->setattr(dentry, attr);
 	else
 		error = simple_setattr(dentry, attr);
 
+	if (attr->ia_valid & ATTR_DENTRY) {
+		if (!(attr->ia_valid & ATTR_FILE))
+			attr->ia_file = NULL;
+		attr->ia_valid &= ~ATTR_DENTRY;
+	}
+
 	if (!error) {
 		fsnotify_change(dentry, ia_valid);
 		evm_inode_post_setattr(dentry, ia_valid);
